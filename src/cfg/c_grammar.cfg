
translation-unit
    : external-declaration
    | translation-unit external-declaration
    ;

external-declaration
    : function-definition
    | declaration
    ;

function-definition
	:
    |                        declarator                  compound-statement
    | declaration-specifiers declarator                  compound-statement
    |                        declarator declaration-list compound-statement
    | declaration-specifiers declarator declaration-list compound-statement
    ;

program
	: compoundstmt eof
	;
	
compoundstmt
	: '{' '}'
	| '{' statmentlst '}'
	;
	
compound-statement
    : '{' '}'
    | '{' declaration-list '}'
    | '{' statement-list '}'
    | '{' declaration-list statement-list '}'
    ;


statmentlst
	: statment
	| statmentlst statment
	;
	
statement
	: compoundstmt
    | expressionstmt
    | iterationstmt
    | selectionstmt
    | jumpstmt
    ;
	
expressionstmt
	: ';'
	| assigexpr ';'
	;
 
iterationstmt
	: 'while' '(' assigexpr ')' statement
	;
	
selectionstmt
	: 'if' '(' assigexpr ')' statement
	| 'if' '(' assigexpr ')' statement 'else' statement
	;
	
jumpstmt
	: 'return' expressionstmt
	;

parameter
	: declarator identifier
	;

paramlst
	: parameter
	| paramlst ',' parameter
	;
	
definition
	: vardef
	| funcdef
	;
	
funcdef
	: declarator identifier '(' paramlst ')' compoundstmt

vardef
	: declarator identifier '=' statement
	| declarator identifier ';'
	;
	
declarator
	: 'int'
	| 'double'
	| declaredname
	;
	
expr
	: assigexpr
	| expr ',' assigexpr
	;
	
assigexpr
	: disjunction
	| identifier '=' assigexpr
	;

    
disjunction
    : conjunction
    | disjunction '||' conjunction
    ;
conjunction
    : negation
    | conjunction '&&' negation
    ;
negation
    : relation
    | '!' relation
    ;
    
relation
    : sum
    | sum '<'  sum
    | sum '<=' sum
    | sum '==' sum
    | sum '!=' sum
    | sum '>=' sum
    | sum '>'  sum
    ;

sum
    : term
    | assigexpr '+' term
    | assigexpr '-' term
    ;

term
    : unary
    | term '*' unary
    | term '/' unary
    | term '%' unary
    ;
    
unary
	: factor
	| '-' factor
	| '+' factor
	| '&' factor
	| '*' factor
	| '--' factor
	| '++' factor
	;    
    
factor
    : constant
    | identifier
    | strliteral
    | '(' assigexpr ')'
    | declarator
    ;
		
declaredname
	: identifier
	;	
	
declaration
	: 'class' declaredname '{' declarationlst '}' ';'
	;


	
declaration
    : declaration-specifiers ';'
    | declaration-specifiers init-declarator-list ';'
    ;

declaration-specifiers
    : storage-class-specifier
    | type-specifier
    | type-qualifier
    | storage-class-specifier declaration-specifiers
    | type-specifier          declaration-specifiers
    | type-qualifier          declaration-specifiers
    ;

init-declarator-list
    : init-declarator
    | init-declarator-list ',' init-declarator
    ;

init-declarator
    : declarator
    | declarator '=' initializer
    ;

storage-class-specifier
    : 'typedef'
    | 'extern'
    | 'static'
    | 'auto'
    | 'register'
    ;

type-specifier
    : 'void'
    | 'char'
    | 'short'
    | 'int'
    | 'long'
    | 'float'
    | 'double'
    | 'signed'
    | 'unsigned'
    | struct-or-union-specifier
    | enum-specifier
    | typedef-name
    ;

type-qualifier
    : 'const'
    | 'volatile'
    ;

declarator
    : direct-declarator
    | pointer direct-declarator
    ;
	
direct-declarator
    : identifier
    | '(' declarator ')'
    | direct-declarator '[' ']'
    | direct-declarator '[' constant-expression ']'
    | direct-declarator '(' ')'
    | direct-declarator '(' parameter-type-list ')'
    | direct-declarator '(' identifier-list ')'
    ;
    
parameter-type-list
    : parameter-list
    | parameter-list ',' '...'
    ;

parameter-list
    : parameter-declaration
    | parameter-list , parameter-declaration
    ;

parameter-declaration
    : declaration-specifiers declarator
    | declaration-specifiers
    | declaration-specifiers abstract-declarator
    ;

initializer
    : assignment-expression
    | '{' initializer-list '}'
    | '{' initializer-list ',' '}'
    ;

typedef-name
    : identifier
    ;
    
        

